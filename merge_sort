#include <iostream>
using namespace std;

void merge(int A[],int p, int q, int r){
//take 2 arrays - A[p...q] and A[q+1...r]
    int n1 = q-p+1;
    int n2 = r - q;
    
    //create Left & Right arrays of size n1 and n2
    
    int L[n1];
    int R[n2];
    
    for (int i=0;i<n1;i++){
        L[i] = A[p+i];//copy left array into L
    }
    
    for (int j=0;j<n2;j++){
        R[j] = A[q+j+1]; //copy right array into R
    }
    int k=p;//set the pointer at p in Array A to populate the lightest of the cards :) Cormen reference
    int i=0;
    int j=0;
    while(i<n1 && j<n2){ //as long as the arrays don't exceed size, keep putting the lighter one in the array
        if(L[i] < R[j]){
            A[k] = L[i];
            i++;
        }
        else {
            A[k] = R[j];
            j++;
        }
        k++;
    }
    while (i<n1){// if one stack of card is exhausted, use the other stack fully
        A[k] = L[i];
        k++;
        i++;
    }
    while(j<n2){// same logic as above
        A[k] = R[j];
        k++;
        j++;
    }
    
}

void mergesort(int A[],int p, int r){
    if(p<r){
        int q = (p+r)/2;
        mergesort(A,p,q); // divide into 2 sub-arrays
        mergesort(A,q+1,r); // divide into 2 sub-arrays
        merge(A,p,q,r); // merge the sorted arrays into one
    }
}

int main(){// driver code
    int A[6] = {5,1,4,2,3,6};
    mergesort(A,0,5);
    for(int l = 0; l < 6; l++){// output code
        cout<<A[l]<< " ";
    }
}
